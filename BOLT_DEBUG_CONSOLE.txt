// BOLT DEBUG - Plak dit in de browser console
// Kopieer alles hieronder en plak in Console (F12)

(function() {
  console.log('=== BOLT CONFIGURATION CHECK ===');
  
  // Check URL parameters
  const url = new URL(window.location.href);
  console.log('\nüìç URL Parameters:');
  console.log('  brand_id:', url.searchParams.get('brand_id') || '‚ùå MISSING');
  console.log('  token:', url.searchParams.get('token') ? '‚úÖ Present (length: ' + url.searchParams.get('token').length + ')' : '‚ùå MISSING');
  console.log('  api:', url.searchParams.get('api') || '‚ùå MISSING');
  console.log('  apikey:', url.searchParams.get('apikey') || url.searchParams.get('api_key') || '‚ùå MISSING');
  
  // Check global variables
  console.log('\nüåç Global Variables:');
  console.log('  window.CURRENT_BRAND_ID:', window.CURRENT_BRAND_ID || '‚ùå NOT SET');
  console.log('  window.CURRENT_TOKEN:', window.CURRENT_TOKEN ? '‚úÖ Set (length: ' + window.CURRENT_TOKEN.length + ')' : '‚ùå NOT SET');
  console.log('  window.BOLT_API:', window.BOLT_API || '‚ùå NOT SET');
  if (window.BOLT_API) {
    console.log('    - baseUrl:', window.BOLT_API.baseUrl || '‚ùå NOT SET');
    console.log('    - apiKey:', window.BOLT_API.apiKey ? '‚úÖ Set (length: ' + window.BOLT_API.apiKey.length + ')' : '‚ùå NOT SET');
  }
  console.log('  window.FnClient:', window.FnClient || '‚ùå NOT SET');
  if (window.FnClient && window.FnClient.functionsBase) {
    console.log('    - functionsBase():', window.FnClient.functionsBase());
  }
  
  // Check what's needed for import
  console.log('\n‚úÖ Requirements Check:');
  const hasAll = window.CURRENT_BRAND_ID && 
                 (window.FnClient?.functionsBase?.() || window.BOLT_API?.baseUrl);
  
  if (hasAll) {
    console.log('  ‚úÖ All required config present!');
    console.log('  Ready to import pages from Bolt.');
  } else {
    console.log('  ‚ùå Missing required config!');
    
    // Show what's missing
    if (!window.CURRENT_BRAND_ID) console.log('    - Missing: CURRENT_BRAND_ID');
    if (!window.FnClient?.functionsBase?.() && !window.BOLT_API?.baseUrl) console.log('    - Missing: API base URL');
  }
  
  console.log('\n=================================');
})();

// Now test the API
(async function() {
  console.log('\n=== TESTING BOLT API ===');
  
  const brand_id = window.CURRENT_BRAND_ID;
  const apiBase = (window.FnClient?.functionsBase?.() || window.BOLT_API?.baseUrl || '').replace(/\/$/, '');
  const token = window.CURRENT_TOKEN;
  const apikey = window.BOLT_API?.apiKey;
  
  if (!brand_id || !apiBase) {
    console.error('‚ùå Cannot test API - missing brand_id or apiBase');
    console.log('  brand_id:', brand_id || 'MISSING');
    console.log('  apiBase:', apiBase || 'MISSING');
    return;
  }
  
  console.log('\nüì° Testing API endpoint:');
  const testUrl = `${apiBase}/pages-api/list?brand_id=${encodeURIComponent(brand_id)}`;
  console.log('  URL:', testUrl);
  
  try {
    console.log('\n‚è≥ Fetching...');
    const headers = { 'Content-Type': 'application/json' };
    if (token) {
      headers.Authorization = `Bearer ${token}`;
      console.log('  ‚úÖ Added Authorization header');
    }
    if (apikey) {
      headers.apikey = apikey;
      console.log('  ‚úÖ Added apikey header');
    }
    
    const response = await fetch(testUrl, { headers });
    
    console.log('\nüì• Response:');
    console.log('  Status:', response.status, response.statusText);
    
    const contentType = response.headers.get('content-type') || '';
    let data;
    
    if (contentType.includes('application/json')) {
      data = await response.json();
      console.log('  Body (JSON):', data);
    } else {
      data = await response.text();
      console.log('  Body (Text):', data.substring(0, 500));
    }
    
    if (response.ok) {
      console.log('\n‚úÖ API call successful!');
      if (data.pages) {
        console.log(`  üìÑ Found ${data.pages.length} total pages`);
        const withMenu = data.pages.filter(p => p.show_in_menu);
        console.log(`  üìã ${withMenu.length} pages with show_in_menu=true`);
        
        if (withMenu.length > 0) {
          console.log('\n  Pages for menu:');
          withMenu.forEach(p => {
            console.log(`    - ${p.title || p.slug} (slug: ${p.slug})`);
          });
        } else {
          console.warn('\n  ‚ö†Ô∏è No pages have show_in_menu=true!');
          console.log('  This is why "Importeer mijn pagina\'s" shows no results.');
          console.log('  Fix: In Bolt, set show_in_menu=true for pages you want in the menu.');
        }
      } else {
        console.warn('  ‚ö†Ô∏è Response has no "pages" array');
      }
    } else {
      console.error('\n‚ùå API call failed!');
      console.error('  Status:', response.status);
      console.error('  Error:', data);
      
      if (response.status === 404) {
        console.log('\nüí° Possible fixes:');
        console.log('  1. Check if endpoint exists in Bolt: /pages-api/list');
        console.log('  2. Try alternative endpoint: /pages-api (without /list)');
      } else if (response.status === 401 || response.status === 403) {
        console.log('\nüí° Authentication issue:');
        console.log('  1. Check if token is valid (not expired)');
        console.log('  2. Check if apikey is correct');
        console.log('  3. Check if brand_id has access to this API');
      }
    }
    
  } catch (error) {
    console.error('\n‚ùå API call error!');
    console.error('  Error:', error.message);
    console.error('  This usually means:');
    console.error('    - CORS issue');
    console.error('    - Network error');
    console.error('    - API endpoint doesn\'t exist');
  }
  
  console.log('\n=================================');
})();
